version: 0.2

env:
  variables:
    AWS_REGION: "us-west-2"
    test_mongo: "localhost:5000"
phases:
  install:
    runtime-versions:
      docker: 18
  pre_build:
    commands:
      - aws sts get-caller-identity
      - env
      - /usr/local/bin/entrypoint.sh
      - echo logging in to ecr...
      - >
        aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
  build:
    commands:
      - echo building prod images...
      # - >
      #   docker build \
      #     -f ./Dockerfile \
      #     -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/uber-be:prod \
      #     --build-arg test_mongo="$test_mongo" \
      #     --build-arg mongoDBip="$mongoDBip" \
      #     .
           
  post_build:
    commands:
    - echo pushing prod images to ecr...
    # - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/uber-be:prod
    - echo update k8s
    - echo -n "$configmap" >> configmap.yml
    # - rm $HOME/.kube/kubeconfig
    # - echo -n "$kubeconfig" >> $HOME/.kube/kubeconfig
    # - cat $HOME/.kube/kubeconfig
    # - cat configmap.yml
    - kubectl apply -f configmap.yml
    - kubectl get no
    - kubectl apply -f ./k8s/flask.yaml
    # - kubectl 
    # - kubectl set image deployment flask-deployment flask=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/uber-be:prod